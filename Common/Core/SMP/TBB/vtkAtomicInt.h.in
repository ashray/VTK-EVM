 /*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkAtomicInt.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkAtomicInt -
// .SECTION Description

#ifndef vtkAtomicInt_h
#define vtkAtomicInt_h

#include <tbb/atomic.h>

#include <cstddef>
#include <limits>

#ifndef __WRAP__
namespace detail
{
template <bool> struct CompileTimeCheck;
template <> struct CompileTimeCheck<true> {};

template <typename T> struct SupportedIntegralType
{
  CompileTimeCheck<std::numeric_limits<T>::is_specialized> c1;
  CompileTimeCheck<std::numeric_limits<T>::is_integer> c2;
  CompileTimeCheck<sizeof(T) == 4 || sizeof(T) == 8> c3;
};

}
#endif // __WRAP__

template <typename T> class vtkAtomicInt : detail::SupportedIntegralType<T>
{
public:
  vtkAtomicInt()
  {
    this->Atomic = 0;
  }

  vtkAtomicInt(T val)
  {
    this->Atomic = val;
  }

  vtkAtomicInt(const vtkAtomicInt<T> &ai)
  {
    this->Atomic = ai.Atomic;
  }

  T operator++()
  {
    return ++this->Atomic;
  }

  T operator++(int)
  {
    return this->Atomic++;
  }

  T operator--()
  {
    return --this->Atomic;
  }

  T operator--(int)
  {
    return this->Atomic--;
  }

  T operator+=(T val)
  {
    return this->Atomic += val;
  }

  T operator-=(T val)
  {
    return this->Atomic -= val;
  }

  operator T() const
  {
    return this->Atomic;
  }

  T operator=(T val)
  {
    this->Atomic = val;
    return val;
  }

  vtkAtomicInt<T>& operator=(const vtkAtomicInt<T> &ai)
  {
    this->Atomic = ai.Atomic;
    return *this;
  }

  T load() const
  {
    return this->Atomic;
  }

  void store(T val)
  {
    this->Atomic = val;
  }

private:
  tbb::atomic<T> Atomic;
};


template <typename T> class vtkAtomicInt<T*>
{
public:
  vtkAtomicInt()
  {
    this->Atomic = 0;
  }

  vtkAtomicInt(T* val)
  {
    this->Atomic = val;
  }

  vtkAtomicInt(const vtkAtomicInt<T*> &ai)
  {
    this->Atomic = ai.Atomic;
  }

  T* operator++()
  {
    return ++this->Atomic;
  }

  T* operator++(int)
  {
    return this->Atomic++;
  }

  T* operator--()
  {
    return --this->Atomic;
  }

  T* operator--(int)
  {
    return this->Atomic--;
  }

  T* operator+=(ptrdiff_t val)
  {
    return this->Atomic += val;
  }

  T* operator-=(ptrdiff_t val)
  {
    return this->Atomic -= val;
  }

  operator T*() const
  {
    return this->Atomic;
  }

  T* operator=(T* val)
  {
    this->Atomic = val;
    return val;
  }

  vtkAtomicInt<T*>& operator=(const vtkAtomicInt<T*> &ai)
  {
    this->Atomic = ai.Atomic;
    return *this;
  }

  T* load() const
  {
    return this->Atomic;
  }

  void store(T* val)
  {
    this->Atomic = val;
  }

private:
  tbb::atomic<T*> Atomic;
};


template <> class vtkAtomicInt<void*>
{
public:
  vtkAtomicInt()
  {
    this->Atomic = 0;
  }

  vtkAtomicInt(void* val)
  {
    this->Atomic = val;
  }

  vtkAtomicInt(const vtkAtomicInt<void*> &ai)
  {
    this->Atomic = ai.Atomic;
  }

  operator void*() const
  {
    return this->Atomic;
  }

  void* operator=(void* val)
  {
    this->Atomic = val;
    return val;
  }

  vtkAtomicInt<void*>& operator=(const vtkAtomicInt<void*> &ai)
  {
    this->Atomic = ai.Atomic;
    return *this;
  }

  void* load() const
  {
    return this->Atomic;
  }

  void store(void* val)
  {
    this->Atomic = val;
  }

private:
  tbb::atomic<void*> Atomic;
};

#endif
// VTK-HeaderTest-Exclude: vtkAtomicInt.h
